"""
Project management commands
"""
import click
import os
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

from ..config import ProjectConfig
from ..utils import ConsoleColors, OutputFormatter, format_output


@click.command(name='init')
@click.option('--name', prompt='Project name', help='Name of the architecture project')
@click.option('--enterprise', prompt='Enterprise name', help='Name of the enterprise')
@click.option('--description', help='Project description')
@click.option('--scope', help='Architecture scope')
@click.option('--path', type=click.Path(), help='Project directory path')
@click.pass_context
def init_project(ctx, name, enterprise, description, scope, path):
    """Initialize a new architecture project"""
    
    # Determine project path
    if not path:
        projects_dir = Path(ctx.obj['config'].get('projects.default_path', '~/archiagents_projects'))
        projects_dir = projects_dir.expanduser()
        path = projects_dir / name.replace(' ', '_').lower()
    else:
        path = Path(path)
    
    # Create project structure
    try:
        path.mkdir(parents=True, exist_ok=True)
        
        # Create subdirectories
        subdirs = [
            '.archiagents',
            'phases',
            'models',
            'reports',
            'decisions',
            'artifacts'
        ]
        
        for subdir in subdirs:
            (path / subdir).mkdir(exist_ok=True)
        
        # Create project configuration
        project_config = ProjectConfig(str(path))
        project_config.config = {
            'project': {
                'name': name,
                'enterprise': enterprise,
                'description': description or f'Enterprise architecture project for {enterprise}',
                'scope': scope or 'Enterprise-wide architecture',
                'created_at': datetime.now().isoformat(),
                'status': 'initialized',
                'current_phase': None
            },
            'togaf': {
                'version': '10',
                'completed_phases': [],
                'active_phase': None
            },
            'ai': {
                'enabled': False,
                'provider': ctx.obj['config'].get('ai.provider', 'openai'),
                'model': ctx.obj['config'].get('ai.model', 'gpt-4')
            },
            'runtime_intelligence': {
                'enabled': False,
                'autonomous_mode': False
            }
        }
        project_config.save()
        
        # Create README
        readme_content = f"""# {name}

**Enterprise:** {enterprise}
**Created:** {datetime.now().strftime('%Y-%m-%d')}

## Description
{description or f'Enterprise architecture project for {enterprise}'}

## Architecture Scope
{scope or 'Enterprise-wide architecture'}

## Project Structure
- `phases/` - TOGAF ADM phase deliverables
- `models/` - ArchiMate models
- `reports/` - Architecture reports
- `decisions/` - Architecture decisions
- `artifacts/` - Supporting artifacts

## Getting Started

```bash
# Navigate to project
cd {path}

# Check project status
archiagents project status

# Start Phase A
archiagents phase run phase-a
```

## TOGAF Phases
- [ ] Preliminary Phase
- [ ] Phase A: Architecture Vision
- [ ] Phase B: Business Architecture
- [ ] Phase C: Information Systems Architecture
- [ ] Phase D: Technology Architecture
- [ ] Phase E: Opportunities and Solutions
- [ ] Phase F: Migration Planning
- [ ] Phase G: Implementation Governance
- [ ] Phase H: Architecture Change Management

---
Generated by ArchiAgents CLI
"""
        
        (path / 'README.md').write_text(readme_content)
        
        # Success message
        click.echo(ConsoleColors.success(f"\n‚úÖ Project initialized successfully!"))
        click.echo(f"\nProject: {ConsoleColors.BOLD}{name}{ConsoleColors.END}")
        click.echo(f"Location: {path}")
        click.echo(f"\n{ConsoleColors.CYAN}Next steps:{ConsoleColors.END}")
        click.echo("  1. cd " + str(path))
        click.echo("  2. archiagents project status")
        click.echo("  3. archiagents phase run phase-a\n")
        
    except Exception as e:
        click.echo(ConsoleColors.error(f"‚ùå Failed to initialize project: {e}"), err=True)
        raise click.Abort()


@click.command(name='list')
@click.option('--format', type=click.Choice(['table', 'json', 'yaml']), default='table', help='Output format')
@click.pass_context
def list_projects(ctx, format):
    """List all architecture projects"""
    
    projects_dir = Path(ctx.obj['config'].get('projects.default_path', '~/archiagents_projects')).expanduser()
    
    if not projects_dir.exists():
        click.echo("No projects found. Use 'archiagents project init' to create one.")
        return
    
    projects = []
    for project_path in projects_dir.iterdir():
        if project_path.is_dir() and (project_path / '.archiagents' / 'project.yaml').exists():
            config = ProjectConfig(str(project_path))
            projects.append({
                'name': config.get('project.name', 'Unknown'),
                'enterprise': config.get('project.enterprise', 'Unknown'),
                'status': config.get('project.status', 'unknown'),
                'phase': config.get('togaf.active_phase', 'None'),
                'created': config.get('project.created_at', 'Unknown'),
                'path': str(project_path)
            })
    
    if not projects:
        click.echo("No projects found.")
        return
    
    if format == 'json':
        click.echo(json.dumps(projects, indent=2))
    elif format == 'yaml':
        import yaml
        click.echo(yaml.dump(projects, default_flow_style=False))
    else:
        # Table format
        headers = ['Name', 'Enterprise', 'Status', 'Current Phase', 'Created']
        rows = [
            [
                p['name'],
                p['enterprise'],
                p['status'],
                p['phase'] or '-',
                p['created'][:10] if isinstance(p['created'], str) else p['created']
            ]
            for p in projects
        ]
        
        table = OutputFormatter.format_table(headers, rows, "Architecture Projects")
        click.echo(table)


@click.command(name='status')
@click.option('--project', type=click.Path(exists=True), help='Project directory')
@click.option('--format', type=click.Choice(['table', 'json', 'tree']), default='table')
@click.pass_context
def project_status(ctx, project, format):
    """Show project status and progress"""
    
    if not project:
        project = os.getcwd()
    
    project_path = Path(project)
    config_file = project_path / '.archiagents' / 'project.yaml'
    
    if not config_file.exists():
        click.echo(ConsoleColors.error("‚ùå Not an ArchiAgents project directory"), err=True)
        click.echo("Use 'archiagents project init' to initialize a project.")
        raise click.Abort()
    
    config = ProjectConfig(str(project_path))
    
    if format == 'json':
        click.echo(json.dumps(config.config, indent=2, default=str))
        return
    
    # Display project information
    click.echo(f"\n{ConsoleColors.HEADER}{'='*70}{ConsoleColors.END}")
    click.echo(f"{ConsoleColors.BOLD}Project: {config.get('project.name')}{ConsoleColors.END}")
    click.echo(f"{ConsoleColors.HEADER}{'='*70}{ConsoleColors.END}\n")
    
    # Basic info
    click.echo(f"{ConsoleColors.CYAN}Enterprise:{ConsoleColors.END} {config.get('project.enterprise')}")
    click.echo(f"{ConsoleColors.CYAN}Status:{ConsoleColors.END} {config.get('project.status')}")
    click.echo(f"{ConsoleColors.CYAN}Created:{ConsoleColors.END} {config.get('project.created_at')[:10]}")
    click.echo(f"{ConsoleColors.CYAN}Scope:{ConsoleColors.END} {config.get('project.scope')}")
    
    # TOGAF progress
    click.echo(f"\n{ConsoleColors.BOLD}TOGAF Progress:{ConsoleColors.END}")
    completed_phases = config.get('togaf.completed_phases', [])
    active_phase = config.get('togaf.active_phase')
    
    phases = [
        'preliminary',
        'phase-a', 'phase-b', 'phase-c', 'phase-d',
        'phase-e', 'phase-f', 'phase-g', 'phase-h'
    ]
    
    for phase in phases:
        status = ""
        if phase in completed_phases:
            status = ConsoleColors.success("‚úÖ Complete")
        elif phase == active_phase:
            status = ConsoleColors.warning("üîÑ In Progress")
        else:
            status = "‚è≥ Pending"
        
        phase_name = phase.replace('-', ' ').title()
        click.echo(f"  {phase_name:30} {status}")
    
    progress_pct = int((len(completed_phases) / len(phases)) * 100)
    click.echo(f"\n{ConsoleColors.CYAN}Overall Progress:{ConsoleColors.END} {OutputFormatter.format_progress(len(completed_phases), len(phases))}")
    
    # AI Configuration
    click.echo(f"\n{ConsoleColors.BOLD}AI Configuration:{ConsoleColors.END}")
    click.echo(f"  Enabled: {config.get('ai.enabled', False)}")
    if config.get('ai.enabled'):
        click.echo(f"  Provider: {config.get('ai.provider')}")
        click.echo(f"  Model: {config.get('ai.model')}")
    
    # Runtime Intelligence
    click.echo(f"\n{ConsoleColors.BOLD}Runtime Intelligence:{ConsoleColors.END}")
    click.echo(f"  Enabled: {config.get('runtime_intelligence.enabled', False)}")
    if config.get('runtime_intelligence.enabled'):
        click.echo(f"  Autonomous Mode: {config.get('runtime_intelligence.autonomous_mode')}")
    
    click.echo(f"\n{ConsoleColors.HEADER}{'='*70}{ConsoleColors.END}\n")


@click.command(name='delete')
@click.argument('name')
@click.option('--force', is_flag=True, help='Force deletion without confirmation')
@click.pass_context
def delete_project(ctx, name, force):
    """Delete an architecture project"""
    
    projects_dir = Path(ctx.obj['config'].get('projects.default_path', '~/archiagents_projects')).expanduser()
    project_path = projects_dir / name.replace(' ', '_').lower()
    
    if not project_path.exists():
        click.echo(ConsoleColors.error(f"‚ùå Project '{name}' not found"), err=True)
        raise click.Abort()
    
    if not force:
        click.confirm(
            f"Are you sure you want to delete project '{name}'? This cannot be undone.",
            abort=True
        )
    
    import shutil
    try:
        shutil.rmtree(project_path)
        click.echo(ConsoleColors.success(f"‚úÖ Project '{name}' deleted successfully"))
    except Exception as e:
        click.echo(ConsoleColors.error(f"‚ùå Failed to delete project: {e}"), err=True)
        raise click.Abort()


# Export commands
__all__ = ['init_project', 'list_projects', 'project_status', 'delete_project']
